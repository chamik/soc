https://prismaliser.app?code=Ly8gVGhpcyBpcyB5b3VyIFByaXNtYSBzY2hlbWEgZmlsZSwKLy8gbGVhcm4gbW9yZSBhYm91dCBpdCBpbiB0aGUgZG9jczogaHR0cHM6Ly9wcmlzLmx5L2QvcHJpc21hLXNjaGVtYQoKZ2VuZXJhdG9yIGNsaWVudCB7CiAgcHJvdmlkZXIgICAgICA9ICJwcmlzbWEtY2xpZW50LWpzIgogIGJpbmFyeVRhcmdldHMgPSBbIm5hdGl2ZSIsICJsaW51eC1tdXNsLW9wZW5zc2wtMy4wLngiXQp9CgpkYXRhc291cmNlIGRiIHsKICBwcm92aWRlciA9ICJwb3N0Z3Jlc3FsIgogIC8vIE5PVEU6IFdoZW4gdXNpbmcgcG9zdGdyZXNxbCwgbXlzcWwgb3Igc3Fsc2VydmVyLCB1bmNvbW1lbnQgdGhlIEBkYi5UZXh0IGFubm90YXRpb25zIGluIG1vZGVsIEFjY291bnQgYmVsb3cKICAvLyBGdXJ0aGVyIHJlYWRpbmc6CiAgLy8gaHR0cHM6Ly9uZXh0LWF1dGguanMub3JnL2FkYXB0ZXJzL3ByaXNtYSNjcmVhdGUtdGhlLXByaXNtYS1zY2hlbWEKICAvLyBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9yZWZlcmVuY2UvYXBpLXJlZmVyZW5jZS9wcmlzbWEtc2NoZW1hLXJlZmVyZW5jZSNzdHJpbmcKICB1cmwgICAgICA9IGVudigiREFUQUJBU0VfVVJMIikKfQoKLy8gTmVjZXNzYXJ5IGZvciBOZXh0IGF1dGgKbW9kZWwgQWNjb3VudCB7CiAgaWQgICAgICAgICAgICAgICAgU3RyaW5nICBAaWQgQGRlZmF1bHQoY3VpZCgpKQogIHVzZXJJZCAgICAgICAgICAgIFN0cmluZwogIHR5cGUgICAgICAgICAgICAgIFN0cmluZwogIHByb3ZpZGVyICAgICAgICAgIFN0cmluZwogIHByb3ZpZGVyQWNjb3VudElkIFN0cmluZwogIHJlZnJlc2hfdG9rZW4gICAgIFN0cmluZz8gLy8gQGRiLlRleHQKICBhY2Nlc3NfdG9rZW4gICAgICBTdHJpbmc_IC8vIEBkYi5UZXh0CiAgZXhwaXJlc19hdCAgICAgICAgSW50PwogIHRva2VuX3R5cGUgICAgICAgIFN0cmluZz8KICBzY29wZSAgICAgICAgICAgICBTdHJpbmc_CiAgaWRfdG9rZW4gICAgICAgICAgU3RyaW5nPyAvLyBAZGIuVGV4dAogIHNlc3Npb25fc3RhdGUgICAgIFN0cmluZz8KICB1c2VyICAgICAgICAgICAgICBVc2VyICAgIEByZWxhdGlvbihmaWVsZHM6IFt1c2VySWRdLCByZWZlcmVuY2VzOiBbaWRdLCBvbkRlbGV0ZTogQ2FzY2FkZSkKCiAgQEB1bmlxdWUoW3Byb3ZpZGVyLCBwcm92aWRlckFjY291bnRJZF0pCn0KCm1vZGVsIFNlc3Npb24gewogIGlkICAgICAgICAgICBTdHJpbmcgICBAaWQgQGRlZmF1bHQoY3VpZCgpKQogIHNlc3Npb25Ub2tlbiBTdHJpbmcgICBAdW5pcXVlCiAgdXNlcklkICAgICAgIFN0cmluZwogIGV4cGlyZXMgICAgICBEYXRlVGltZQogIHVzZXIgICAgICAgICBVc2VyICAgICBAcmVsYXRpb24oZmllbGRzOiBbdXNlcklkXSwgcmVmZXJlbmNlczogW2lkXSwgb25EZWxldGU6IENhc2NhZGUpCn0KCm1vZGVsIFVzZXIgewogIGlkICAgICAgICAgICAgU3RyaW5nICAgIEBpZCBAZGVmYXVsdChjdWlkKCkpCiAgbmFtZSAgICAgICAgICBTdHJpbmc_CiAgZW1haWwgICAgICAgICBTdHJpbmc_ICAgQHVuaXF1ZQogIGVtYWlsVmVyaWZpZWQgRGF0ZVRpbWU_CiAgaW1hZ2UgICAgICAgICBTdHJpbmc_CiAgYWNjb3VudHMgICAgICBBY2NvdW50W10KICBzZXNzaW9ucyAgICAgIFNlc3Npb25bXQogIGFuc3dlcnMgICAgICAgQW5zd2VyW10KCiAgdGVzdFNlc3Npb24gVGVzdFNlc3Npb24_CgogIGNsYXNzWWVhciBJbnQgICAgIEBkZWZhdWx0KDApCiAgaXNUZWFjaGVyIEJvb2xlYW4gQGRlZmF1bHQoZmFsc2UpCn0KCm1vZGVsIFZlcmlmaWNhdGlvblRva2VuIHsKICBpZGVudGlmaWVyIFN0cmluZwogIHRva2VuICAgICAgU3RyaW5nICAgQHVuaXF1ZQogIGV4cGlyZXMgICAgRGF0ZVRpbWUKCiAgQEB1bmlxdWUoW2lkZW50aWZpZXIsIHRva2VuXSkKfQoKbW9kZWwgUXVlc3Rpb24gewogIGlkICAgICAgICAgICAgSW50ICAgICAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgbGFuZ3VhZ2VMZXZlbCBJbnQgICAgICAgICAgQGRlZmF1bHQoMCkKICBxdWVzdGlvblRleHQgIFN0cmluZyAgICAgICBAZGVmYXVsdCgiIikKICByaWdodEFuc3dlciAgIFN0cmluZyAgICAgICBAZGVmYXVsdCgiIikKICB3cm9uZ0Fuc3dlcnMgIFN0cmluZ1tdICAgICBAZGVmYXVsdChbIiIsICIiLCAiIl0pCiAgcXVlc3Rpb25UeXBlICBRdWVzdGlvblR5cGUgQGRlZmF1bHQoR1JBTU1BUikKICBwb2ludEFtb3VudCAgIEludCAgICAgICAgICBAZGVmYXVsdCgxKQoKICBhbnN3ZXJzIEFuc3dlcltdCn0KCmVudW0gUXVlc3Rpb25UeXBlIHsKICBHUkFNTUFSCiAgUkVBRElORwogIExJU1RFTklORwp9CgovLyBJRExFIC0-IEFDVElWRSAtPiBQRU5ESU5HIC0-IElETEUgLT4gLi4uCi8vIElETEU6ICAgIHdhaXRpbmcgdG8gYmUgc3RhcnRlZAovLyBBQ1RJVkU6ICBiZWluZyBmaWxsZWQgb3V0Ci8vIFBFTkRJTkc6IHdhaXRpbmcgdG8gYmUgcmVzZXQgKGRhdGEgbG9zcykKZW51bSBUZXN0U3RhdHVzIHsKICBJRExFCiAgQUNUSVZFCiAgUEVORElORwp9Cgptb2RlbCBUZXN0IHsKICBpZCAgICAgICAgSW50ICAgICAgICBAaWQgQGRlZmF1bHQoYXV0b2luY3JlbWVudCgpKQogIGNsYXNzICAgICBJbnQgICAgICAgIEB1bmlxdWUgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHRlc3QgZm9yIGVhY2ggY2xhc3MgYXQgYSB0aW1lCiAgdGltZUxpbWl0IEludCAgICAgICAgQGRlZmF1bHQoMCkgLy8gaW4gbWludXRlcwogIHN0YXR1cyAgICBUZXN0U3RhdHVzIEBkZWZhdWx0KElETEUpCgogIC8vIGFtb3VudCBvZiBxdWVzdGlvbnMgZm9yIHRoZSBncmFtbWFyIHBhcnQKICBncmFtbWFyQTFBbW91bnQgSW50IEBkZWZhdWx0KDApCiAgZ3JhbW1hckEyQW1vdW50IEludCBAZGVmYXVsdCgwKQogIGdyYW1tYXJCMUFtb3VudCBJbnQgQGRlZmF1bHQoMCkKICBncmFtbWFyQjJBbW91bnQgSW50IEBkZWZhdWx0KDApCiAgZ3JhbW1hckMxQW1vdW50IEludCBAZGVmYXVsdCgwKQogIGdyYW1tYXJDMkFtb3VudCBJbnQgQGRlZmF1bHQoMCkKCiAgVGVzdFNlc3Npb24gVGVzdFNlc3Npb25bXQp9CgplbnVtIFRlc3RTZXNzaW9uU3RhdHVzIHsKICBBQ1RJVkUKICBQRU5ESU5HCn0KCm1vZGVsIFRlc3RTZXNzaW9uIHsKICBpZCAgICAgICAgSW50ICAgICAgICAgICAgICAgQGlkIEBkZWZhdWx0KGF1dG9pbmNyZW1lbnQoKSkKICBzdGFydFRpbWUgRGF0ZVRpbWUKICBlbmRUaW1lICAgRGF0ZVRpbWUKICBzdGF0dXMgICAgVGVzdFNlc3Npb25TdGF0dXMgQGRlZmF1bHQoQUNUSVZFKQoKICB0ZXN0SWQgSW50CiAgVGVzdCAgIFRlc3QgQHJlbGF0aW9uKGZpZWxkczogW3Rlc3RJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCgogIHVzZXJJZCBTdHJpbmcgQHVuaXF1ZQogIHVzZXIgICBVc2VyICAgQHJlbGF0aW9uKGZpZWxkczogW3VzZXJJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCgogIGdyYW1tYXJRdWVzdGlvbnNJZHMgSW50W10KICBBbnN3ZXIgICAgICAgICAgICAgIEFuc3dlcltdCgogIGNvcnJlY3RBbnN3ZXJzIEludFtdIEBkZWZhdWx0KFtdKQogIHdyb25nQW5zd2VycyAgIEludFtdIEBkZWZhdWx0KFtdKQogIHN1Y2Nlc3NSYXRlICAgIEZsb2F0Cn0KCm1vZGVsIEFuc3dlciB7CiAgaWQgICAgICAgICBJbnQgICAgICBAaWQgQGRlZmF1bHQoYXV0b2luY3JlbWVudCgpKQogIGFuc3dlclRpbWUgRGF0ZVRpbWUKCiAgdXNlcklkIFN0cmluZwogIHVzZXIgICBVc2VyICAgQHJlbGF0aW9uKGZpZWxkczogW3VzZXJJZF0sIHJlZmVyZW5jZXM6IFtpZF0pCgogIHRlc3RTZXNzaW9uSWQgSW50CiAgdGVzdFNlc3Npb24gICBUZXN0U2Vzc2lvbiBAcmVsYXRpb24oZmllbGRzOiBbdGVzdFNlc3Npb25JZF0sIHJlZmVyZW5jZXM6IFtpZF0sIG9uRGVsZXRlOiBDYXNjYWRlKQoKICBxdWVzdGlvbklkIEludAogIHF1ZXN0aW9uICAgUXVlc3Rpb24gQHJlbGF0aW9uKGZpZWxkczogW3F1ZXN0aW9uSWRdLCByZWZlcmVuY2VzOiBbaWRdKQoKICBhbnN3ZXIgU3RyaW5nCn0K